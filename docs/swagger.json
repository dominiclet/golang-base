{
    "swagger": "2.0",
    "info": {
        "title": "Golang base server",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/session/login": {
            "post": {
                "description": "Create login session for user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "session"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Email and password for authentication",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/session.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpresp.StandardDataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/session.UserLoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    },
                    "403": {
                        "description": "User is not verified",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "Create user data",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpresp.StandardDataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.CreateUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "User with same email already exists",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        },
        "/user/reset_password": {
            "post": {
                "description": "Starts reset password process by generating and sending 6-digit token to provided email if account exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Specify email of account to reset",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        },
        "/user/reset_password/set_password": {
            "post": {
                "description": "Final API call for reset password process. Set new password, authenticating using auth code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Set new password",
                "parameters": [
                    {
                        "description": "Specify new password for account",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.SetNewPWRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Auth code rejected",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        },
        "/user/reset_password/token_exchange": {
            "post": {
                "description": "Verify 6-digit token and exchange token with auth code to set new password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reset password auth code exchange",
                "parameters": [
                    {
                        "description": "Specify both email and token",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ResetPWAuthCodeExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpresp.StandardDataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.ResetPWAuthCodeExchangeResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Token rejected",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        },
        "/user/verify/resend_email": {
            "post": {
                "description": "Resends verification email while invalidating previous verification link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Resned verification email",
                "parameters": [
                    {
                        "description": "Email and password must be provided to authenticate before sending",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ResendVerificationEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    },
                    "405": {
                        "description": "User already verified",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests made in a short period of time (2 mins)",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        },
        "/user/verify/{userUuid}/{token}": {
            "get": {
                "description": "Handles verification link for email",
                "tags": [
                    "user"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userUuid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/{uuid}": {
            "get": {
                "description": "Get basic user information (protected endpoint)",
                "tags": [
                    "user",
                    "authRequired"
                ],
                "summary": "Get basic user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID",
                        "name": "uuid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpresp.StandardDataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handler_user.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httpresp.StandardResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler_user.User": {
            "type": "object",
            "properties": {
                "account_type": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "httpresp.StandardDataResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "httpresp.StandardResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "session.UserLoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "session.UserLoginResponse": {
            "type": "object",
            "properties": {
                "expiry": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "user.ResendVerificationEmailRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.ResetPWAuthCodeExchangeRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "user.ResetPWAuthCodeExchangeResponse": {
            "type": "object",
            "properties": {
                "auth_code": {
                    "type": "string"
                }
            }
        },
        "user.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "user.SetNewPWRequest": {
            "type": "object",
            "properties": {
                "auth_code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        }
    }
}